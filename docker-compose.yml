services:
  # PostgreSQL for metadata storage (documents, queries, users)
  postgres:
    image: postgres:15
    container_name: knowledge-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./configs/postgres:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Qdrant Vector Database (main vector storage)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: knowledge-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # n8n Workflow Automation Platform
  n8n:
    image: docker.n8n.io/n8nio/n8n
    container_name: knowledge-n8n
    ports:
      - "5678:5678"
    environment:
      WEBHOOK_URL: http://localhost:5678/
      GENERIC_TIMEZONE: UTC
    volumes:
      - n8n_data:/home/node/.n8n
      - ./data:/data
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: knowledge-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MLflow for Experiment Tracking
  mlflow:
    image: python:3.11-slim
    container_name: knowledge-mlflow
    ports:
      - "5000:5000"
    volumes:
      - mlflow_data:/mlflow
    working_dir: /app
    environment:
        MLFLOW_HOST: 0.0.0.0
        MLFLOW_PORT: 5000
    command: >
      bash -c "
        pip install mlflow psycopg2-binary && \
        mlflow server \
          --backend-store-uri postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB} \
          --default-artifact-root /mlflow/artifacts \
          --host 0.0.0.0 \
          --port 5000"
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Named volumes for persistent data
volumes:
  postgres_data:
  qdrant_data:
  n8n_data:
  redis_data:
  mlflow_data:

networks:
  knowledge-network:
    name: knowledge-network
    driver: bridge